@article{amidChipyardIntegratedDesign2020,
  title = {Chipyard: {{Integrated Design}}, {{Simulation}}, and {{Implementation Framework}} for {{Custom SoCs}}},
  shorttitle = {Chipyard},
  author = {Amid, Alon and Biancolin, David and Gonzalez, Abraham and Grubb, Daniel and Karandikar, Sagar and Liew, Harrison and Magyar, Albert and Mao, Howard and Ou, Albert and Pemberton, Nathan and Rigge, Paul and Schmidt, Colin and Wright, John and Zhao, Jerry and Shao, Yakun Sophia and Asanovi{\'c}, Krste and Nikoli{\'c}, Borivoje},
  year = {2020},
  month = jul,
  journal = {IEEE Micro},
  volume = {40},
  number = {4},
  pages = {10--21},
  issn = {1937-4143},
  doi = {10.1109/MM.2020.2996616},
  urldate = {2023-12-30},
  abstract = {Continued improvement in computing efficiency requires functional specialization of hardware designs. Agile hardware design methodologies have been proposed to alleviate the increased design costs of custom silicon architectures, but their practice thus far has been accompanied with challenges in integration and validation of complex systems-on-a-chip (SoCs). We present the Chipyard framework, an integrated SoC design, simulation, and implementation environment for specialized compute systems. Chipyard includes configurable, composable, open-source, generator-based IP blocks that can be used across multiple stages of the hardware development flow while maintaining design intent and integration consistency. Through cloud-hosted FPGA accelerated simulation and rapid ASIC implementation, Chipyard enables continuous validation of physically realizable customized systems.},
  file = {/home/xin/Zotero/storage/4M4NY9BM/Amid et al. - 2020 - Chipyard Integrated Design, Simulation, and Imple.pdf;/home/xin/Zotero/storage/W7UQGYCX/9099108.html}
}

@techreport{asanovicRocketChipGenerator2016,
  title = {The {{Rocket Chip Generator}}},
  author = {Asanovic, Krste and Avi{\textasciicaron}zienis, Rimas and Bachrach, Jonathan and Beamer, Scott and Biancolin, David and Celio, Christopher and Cook, Henry and Dabbelt, Palmer and Hauser, John and Izraelevitz, Adam and Karandikar, Sagar and Keller, Benjamin and Kim, Donggyu and Koenig, John and Lee, Yunsup and Love, Eric and Maas, Martin and Magyar, Albert and Mao, Howard and Moreto, Miquel and Ou, Albert and Patterson, David and Richards, Brian and Schmidt, Colin and Twigg, Stephen and Vo, Huy and Waterman, Andrew},
  year = {2016},
  month = apr,
  abstract = {Rocket Chip is an open-source Sysem-on-Chip design generator that emits synthesizable RTL. It leverages the Chisel hardware construction language to compose a library of sophisticated generators for cores, caches, and interconnects into an integrated SoC. Rocket Chip generates general-purpose processor cores that use the open RISC-V ISA, and provides both an in-order core generator (Rocket) and an out-of-order core generator (BOOM). For SoC designers interested in utilizing heterogeneous specialization for added efficiency gains, Rocket Chip supports the integration of custom accelerators in the form of instruction set extensions, coprocessors, or fully independent novel cores. Rocket Chip has been taped out (manufactured) eleven times, and yielded functional silicon prototypes capable of booting Linux.},
  langid = {english},
  file = {/home/xin/Zotero/storage/GFKV3FLD/Asanovic et al. - The Rocket Chip Generator.pdf}
}

@inproceedings{bachrachChiselConstructingHardware2012,
  title = {Chisel: Constructing Hardware in a {{Scala}} Embedded Language},
  shorttitle = {Chisel},
  booktitle = {Proceedings of the 49th {{Annual Design Automation Conference}}},
  author = {Bachrach, Jonathan and Vo, Huy and Richards, Brian and Lee, Yunsup and Waterman, Andrew and Avi{\v z}ienis, Rimas and Wawrzynek, John and Asanovi{\'c}, Krste},
  year = {2012},
  month = jun,
  pages = {1216--1225},
  publisher = {ACM},
  address = {San Francisco California},
  doi = {10.1145/2228360.2228584},
  urldate = {2023-12-25},
  abstract = {In this paper we introduce Chisel, a new hardware construction language that supports advanced hardware design using highly parameterized generators and layered domain-specific hardware languages. By embedding Chisel in the Scala programming language, we raise the level of hardware design abstraction by providing concepts including object orientation, functional programming, parameterized types, and type inference. Chisel can generate a high-speed C++-based cycleaccurate software simulator, or low-level Verilog designed to map to either FPGAs or to a standard ASIC flow for synthesis. This paper presents Chisel, its embedding in Scala, hardware examples, and results for C++ simulation, Verilog emulation and ASIC synthesis.},
  isbn = {978-1-4503-1199-1},
  langid = {english},
  file = {/home/xin/Zotero/storage/T7WA57VW/Bachrach et al. - 2012 - Chisel constructing hardware in a Scala embedded .pdf}
}

@article{baoAgileOpenSourceHardware2020,
  title = {Agile and {{Open-Source Hardware}}},
  author = {Bao, Yungang and E. Carlson, Trevor},
  year = {2020},
  month = jul,
  journal = {IEEE Micro},
  volume = {40},
  number = {4},
  pages = {6--9},
  issn = {1937-4143},
  doi = {10.1109/MM.2020.3002606},
  urldate = {2023-12-30},
  abstract = {The thirteen articles in this special section focus on agile and open source hardware. These papers cover variety of research topics related to fast, agile, and open hardware design, including methodologies, languages, abstractions, and simulators. As the benefits f traditional technology scaling, like Dennard Scaling and Moore's Law, slow significantly, computer architecture is poised to enter a golden age of innovation. Domain-specific architectures (DSA) are a promising solution to continue improving computing performance, while maintaining the level of energyand area-efficiency previously found in technology scaling. Unfortunately, traditional methodologies of chip design and hardware development have created significant barriers, requiring extremely high non-recurring engineering costs in tools, labor, IPs, and time, which ultimately hold back broad adoption of DSA.},
  file = {/home/xin/Zotero/storage/3X4V96EW/Bao and E. Carlson - 2020 - Agile and Open-Source Hardware.pdf;/home/xin/Zotero/storage/9GPIJY9X/9131089.html}
}

@article{beamerCaseAcceleratingSoftware2020,
  title = {A {{Case}} for {{Accelerating Software RTL Simulation}}},
  author = {Beamer, Scott},
  year = {2020},
  month = jul,
  journal = {IEEE Micro},
  volume = {40},
  number = {4},
  pages = {112--119},
  issn = {1937-4143},
  doi = {10.1109/MM.2020.2997639},
  urldate = {2023-12-30},
  abstract = {RTL simulation is a critical tool for hardware design but its current slow speed often bottlenecks the whole design process. Simulation speed becomes even more crucial for agile and open-source hardware design methodologies, because the designers not only want to iterate on designs quicker, but they may also have less resources with which to simulate them. In this article, we execute multiple simulators and analyze them with hardware performance counters. We find some open-source simulators not only outperform a leading commercial simulator, they also achieve comparable or higher instruction throughput on the host processor. Although advanced optimizations may increase the complexity of the simulator, they do not significantly hinder instruction throughput. Our findings make the case that there is significant room to accelerate software simulation and open-source simulators are a great starting point for researchers.},
  file = {/home/xin/Zotero/storage/AE828UFU/Beamer - 2020 - A Case for Accelerating Software RTL Simulation.pdf;/home/xin/Zotero/storage/FA3ED7C7/9099598.html}
}

@article{bellardQEMUFastPortable2005,
  title = {{{QEMU}}, a {{Fast}} and {{Portable Dynamic Translator}}},
  author = {Bellard, Fabrice},
  year = {2005},
  abstract = {We present the internals of QEMU, a fast machine emulator using an original portable dynamic translator. It emulates several CPUs (x86, PowerPC, ARM and Sparc) on several hosts (x86, PowerPC, ARM, Sparc, Alpha and MIPS). QEMU supports full system emulation in which a complete and unmodified operating system is run in a virtual machine and Linux user mode emulation where a Linux process compiled for one target CPU can be run on another CPU.},
  langid = {english},
  file = {/home/xin/Zotero/storage/CPSNJTJX/Bellard - 2005 - QEMU, a Fast and Portable Dynamic Translator.pdf}
}

@incollection{braytonEspressoIIMinimizationLoop1984,
  title = {The {{Espresso-II Minimization Loop}} and {{Algorithms}}},
  booktitle = {Logic {{Minimization Algorithms}} for {{VLSI Synthesis}}},
  author = {Brayton, Robert K. and Hachtel, Gary D. and McMullen, Curtis T. and {Sangiovanni-Vincentelli}, Alberto L.},
  editor = {Brayton, Robert K. and Hachtel, Gary D. and McMullen, Curtis T. and {Sangiovanni-Vincentelli}, Alberto L.},
  year = {1984},
  pages = {54--138},
  publisher = {Springer US},
  address = {Boston, MA},
  doi = {10.1007/978-1-4613-2821-6_4},
  urldate = {2024-05-11},
  abstract = {ESPRESSO-II receives as its inputs J and D, cube covers of the on-set and the don't-care set of an incompletely specified Boolean function ff. Optionally, it can accept input J and Rx, cube covers of the on- and off-sets. It returns as its output a ``minimized'' cover. As discussed in Chapter 1, the objectives of ESPRESSO-II are to minimize:NPT: the number of product terms in the cover;NLI: the number of literals (non-2's) in the input parts of the cover;NLO: the number of literals in the output parts.},
  isbn = {978-1-4613-2821-6},
  langid = {english}
}

@misc{ChipsallianceRocketchip2023,
  title = {Chipsalliance/Rocket-Chip},
  year = {2023},
  month = dec,
  urldate = {2023-12-26},
  abstract = {Rocket Chip Generator},
  howpublished = {CHIPS Alliance},
  keywords = {chip-generator,chisel,riscv,rocket-chip,rtl,scala}
}

@phdthesis{DengJiYuRISCVChuLiQiDeFenZhiYuCeYouHuaYanJiu2023,
  type = {{硕士}},
  title = {{基于RISC-V处理器的分支预测优化研究}},
  author = {邓, 海文},
  year = {2023},
  doi = {10.27073/d.cnki.ghadu.2023.000257},
  urldate = {2024-04-14},
  abstract = {近年来,RISC-V开源处理器的发展非常迅速,分支预测作为提高处理器性能的重要策略,是RISC-V处理器设计领域的研究重点。分支预测可以通过预测处理器中的跳转行为,减少处理器的无效运行周期,提升处理器整体性能。本文基于RISC-V指令集架构进行了G-Share分支预测器的相关优化研究。针对RISC-V处理器分支预测器对于历史相关性预测与非历史相关性预测的兼容问题,在G-Share分支预测器的基础上提出自适应分支预测器。自适应分支预测器在G-Share分支预测器的基础上加入局部分支预测并由状态饱和选择器进行预测结果选择,平衡历史相关性预测及非历史相关性预测的准确率。基于灵活开展研究工作考虑,设计并实现RV64IM五级流水处理器作为研究基础,实现对G-Share分支预测器的优化设计。搭建仿真验证平台用于处理器的正确性验证及关键性能信息获取。实现单周期功能模拟器NEMU作为处理器对比的参考模型,由差分调试机制Difftest进行性能对比验证并输出处理器运行时的相关性能指标。为了验证优化效果,基于仿真验证平台对优化前后的分支预测器进行整体性能对比,使用riscv-tests、cpu-tests以及Core Mark基准测试作为仿真运行测试,并基于28nm工艺对处理器整体性能进行物理设计评估,主要包括性能、面积以及功耗评估。实验结果表明,分支预测器优化后处理器IPC约提升2.7\%,Core Mark跑分结果为2.53 Core Mark/Mhz,约提升3\%。该处理器最高可运行频率为103MHz,总面积为0.13335502mm{\textasciitilde}2,运行总功耗为17.6947m W。},
  langid = {chinese},
  school = {海南大学},
  keywords = {,Difftest,NEMU,RISC-V},
  file = {/home/xin/Zotero/storage/VLTJRC57/邓 - 2023 - 基于RISC-V处理器的分支预测优化研究.pdf}
}

@inproceedings{dolstraImposingMemoryManagement2004,
  title = {Imposing a {{Memory Management Discipline}} on {{Software Deployment}}},
  booktitle = {Proceedings of the 26th {{International Conference}} on {{Software Engineering}}},
  author = {Dolstra, Eelco and Visser, Eelco and {de Jonge}, Merijn},
  year = {2004},
  month = may,
  series = {{{ICSE}} '04},
  pages = {583--592},
  publisher = {IEEE Computer Society},
  address = {USA},
  urldate = {2024-04-25},
  abstract = {The deployment of software components frequently failsbecause dependencies on other components are not declaredexplicitly or are declared imprecisely. This resultsin an incomplete reproduction of the environment necessaryfor proper operation, or in interference between incompatiblevariants. In this paper we show that these deploymenthazards are similar to pointer hazards in memory models ofprogramming languages and can be countered by imposinga memory management discipline on software deployment.Based on this analysis we have developed a generic, platformand language independent, discipline for deploymentthat allows precise dependency verification; exact identification of component variants; computation of complete closures containing all components on which a component depends;maximal sharing of components between such closures;and concurrent installation of revisions and variantsof components. We have implemented the approach in theNix deployment system, and used it for the deployment of alarge number of existing Linux packages. We compare its effectivenessto other deployment systems.},
  isbn = {978-0-7695-2163-3},
  file = {/home/xin/Zotero/storage/ACXIFB6C/Dolstra et al. - 2004 - Imposing a Memory Management Discipline on Softwar.pdf}
}

@phdthesis{GaoQianRuShiRISCVWeiChuLiQiTiXiJiaGouDeYanJiu2023,
  type = {{硕士}},
  title = {{嵌入式RISC-V微处理器体系架构的研究}},
  author = {高, 洁},
  year = {2023},
  doi = {10.27661/d.cnki.gzhnu.2023.002830},
  urldate = {2024-05-07},
  abstract = {物联网的普及促进了嵌入式处理器需求的快速增长,而在嵌入式领域占据主导地位的是基于ARM指令集的处理器,无法满足自主可控的要求。开源的RISC-V指令集具有模块化、功耗低、中断响应迅速且可扩展的优点,基于RISC-V自主设计的嵌入式处理器不仅满足边缘设备对片上面积、功耗及性能的需求,而且有利于实现自主可控。当前与RISC-V嵌入式处理器相关的研究更多的聚焦在低功耗设计上,本文从性能及功耗两者均衡的角度出发,设计了一种基于RISC-V指令集的嵌入式处理器。主要研究内容包括:(1)基于RV32IMC指令集提出了一种四级流水线架构,包含取指、译码、执行和写回四个阶段,具有顺序取指、乱序执行、乱序写回的特点。该架构可实现长周期指令与单周期指令的并行执行,并支持动态分支预测和矢量中断处理。(2)对处理器流水线结构进行了进一步性能优化:针对小容量分支预测结构下索引混叠导致分支预测准确率下降的问题,提出了一种基于PC地址分段异或的Gshare索引方法,将预测准确率平均提高了2.4\%;针对访存时间较长导致的结构冒险问题,提出了一种基于OMAIF(Outstanding Memory Access Instruction FIFO)的派遣机制,采用FIFO暂存访存指令,实现了多条访存指令和后序指令的并行执行,降低了结构冒险导致流水线暂停的概率,将Dhrystone测试程序跑分提高了4.4\%;为了降低中断响应延迟,优化了矢量中断的处理机制,提高了中断指令预取与CSR寄存器压栈操作的并行度,将矢量中断的响应时间降低至23个时钟周期。(3)采用Verilog HDL硬件描述语言实现了处理器的RTL代码设计,搭建了仿真环境,采用Model Sim软件完成了功能验证,并基于TSMC90nm工艺库进行了逻辑综合。结果表明:在50MHz主频下Dhrystone及Coremark测试程序的跑分分别达到1.28DMIPS/MHz及2.91Coremark/MHz,优于同类设计,且功耗相近。图61幅,表15个,参考文献61},
  langid = {chinese},
  school = {中南大学},
  keywords = {,Gshare,RISC-V},
  file = {/home/xin/Zotero/storage/DF9NE7V2/高 - 2023 - 嵌入式RISC-V微处理器体系架构的研究.pdf}
}

@book{hennessyComputerArchitectureQuantitative2012,
  title = {Computer {{Architecture}}: {{A Quantitative Approach}}},
  shorttitle = {Computer {{Architecture}}},
  author = {Hennessy, John L. and Patterson, David A. and Asanovi{\'c}, Krste},
  year = {2012},
  publisher = {Elsevier},
  abstract = {Computer Architecture: A Quantitative Approach, Fifth Edition, explores the ways that software and technology in the cloud are accessed by digital media, such as cell phones, computers, tablets, and other mobile devices. The book, which became a part of Intel's 2012 recommended reading list for developers, covers the revolution of mobile computing. It also highlights the two most important factors in architecture today: parallelism and memory hierarchy. This fully updated edition is comprised of six chapters that follow a consistent framework: explanation of the ideas in each chapter; a crosscutting issues section, which presents how the concepts covered in one chapter connect with those given in other chapters; a putting it all together section that links these concepts by discussing how they are applied in real machine; and detailed examples of misunderstandings and architectural traps commonly encountered by developers and architects. Formulas for energy, static and dynamic power, integrated circuit costs, reliability, and availability are included. The book also covers virtual machines, SRAM and DRAM technologies, and new material on Flash memory. Other topics include the exploitation of instruction-level parallelism in high-performance processors, superscalar execution, dynamic scheduling and multithreading, vector architectures, multicore processors, and warehouse-scale computers (WSCs). There are updated case studies and completely new exercises. Additional reference appendices are available online. This book will be a valuable reference for computer architects, programmers, application developers, compiler and system software developers, computer system designers and application developers.   Part of Intel's 2012 Recommended Reading List for Developers Updated to cover the mobile computing revolution Emphasizes the two most important topics in architecture today: memory hierarchy and parallelism in all its forms. Develops common themes throughout each chapter: power, performance, cost, dependability, protection, programming models, and emerging trends ("What's Next") Includes three review appendices in the printed text. Additional reference appendices are available online. Includes updated Case Studies and completely new exercises.},
  isbn = {978-0-12-383872-8},
  langid = {english},
  keywords = {Computers / Computer Architecture}
}

@standard{IEEEStandardSystemVerilog2005,
  title = {{{IEEE Standard}} for {{SystemVerilog}}: {{Unified Hardware Design}}, {{Specification}} and {{Verification Language}}},
  shorttitle = {{{IEEE Standard}} for {{SystemVerilog}}},
  year = {2005},
  month = nov,
  doi = {10.1109/IEEESTD.2005.97972},
  urldate = {2024-05-12},
  abstract = {This standard represents a merger of two previous standards: IEEE 1364-2005 Verilog hardware description language (HDL) and IEEE 1800-2005 SystemVerilog unified hardware design, specification and verification language. The 2005 SystemVerilog standard defines extensions to the 2005 Verilog standard. These two standards were designed to be used as one language. Merging the base Verilog language and the SystemVerilog extensions into a single standard enables users to have all information regarding syntax and semantics in a single document.},
  keywords = {Assertions,Color,Design Automation,Design Verification,Graphics,Hardware,Hardware Description Language (HDL),Hardware design languages,IEEE Standards,Programming,Programming Language Interface (PLI),SystemVerilog,Verilog,Verilog Programming Interface (VPI)},
  file = {/home/xin/Zotero/storage/AXNWMYKU/1560791.html}
}

@phdthesis{JiangJiYuFPGADe32WeiRISCVChuLiQiSheJi2023,
  type = {{硕士}},
  title = {{基于FPGA的32位RISC-V处理器设计}},
  author = {姜, 贺亮},
  year = {2023},
  doi = {10.27204/d.cnki.glzhu.2023.000436},
  urldate = {2024-05-07},
  abstract = {一直以来,集成电路产业都是我国信息技术领域发展的重点,而处理器设计是集成电路产业重要的组成部分之一。然而不论是个人计算机领域、服务器领域,还是微控制器领域,处理器设计所涉及的指令集架构授权方面都被严格制约。RISC-V作为开源且高效的指令集架构,有望在芯片国产化替代的浪潮下成为处理器国产化的突破口。主要工作内容总结如下:1.对RISC-V指令集架构进行了研究,并基于该架构设计了兼容RV32IM子集的五级流水线处理器核。在进行流水线结构设计的过程中分析了五级流水线结构相较两级和三级流水线结构带来的更为复杂的流水线冲突情况,并设计了相应的解决方案。对于RV32M指令集中除法相关的指令设计了专门的多周期除法器,该除法器结合处理器核的流水线停顿机制可以实现对除法相关指令的支持。2.为了实现处理器核的指令集兼容性的仿真测试,运行高级语言程序,以及FPGA板级验证,在处理器核的基础上搭建了So C。So C的总线部分参考了Wishbone总线的原理,并在此基础上简化出了So C中的总线结构,总线上搭载了ROM、RAM、UART和Timer四种外设。3.仿真验证方面,首先对处理器核的指令兼容性进行了仿真测试,针对处理器反复迭代设计中进行的重复仿真情况,采用了Python脚本进行指令自动化兼容性仿真测试的方案,降低了仿真过程中的时间成本。其次,通过运行C语言程序的方式分别对总线上搭载的外设进行了功能仿真。确保处理器核和外设之间的交互功能正常后,在NEXYS A7 FPGA开发平台上对So C进行了板级验证,经过Vivado综合和布局布线,So C在33 MHz的时钟频率下总功耗仅为0.208 W。最后,通过运行C语言程序并观测程序运行结果验证了了So C功能的正确性,同时在So C启动了RT-Thread nano操作系统。},
  langid = {chinese},
  school = {兰州大学},
  keywords = {,FPGA,RISC-V,SoC},
  file = {/home/xin/Zotero/storage/CL2EHFPS/姜 - 2023 - 基于FPGA的32位RISC-V处理器设计.pdf}
}

@phdthesis{JiaRISCVChuLiQiHeSheJiYouHuaYuKuoZhanZhiLingJiShiXianYanJiu2023,
  type = {{硕士}},
  title = {{RISC-V处理器核设计优化与扩展指令集实现研究}},
  author = {贾, 思敏},
  year = {2023},
  doi = {10.27272/d.cnki.gshdu.2023.002851},
  urldate = {2024-04-14},
  abstract = {随着世界半导体市场竞争加剧,RISC-V以其开源和模块化的显著优势赢得国内半导体行业的广泛关注。面对当前的国际环境,国内半导体行业面临着重大挑战,而RISC-V指令集架构芯片就是实现芯片自主可控的一个关键道路。如今,随着电子产品应用场景的多样化,终端设备对于通用性、灵活性和性能的要求日益提高,这对处理器芯片提出了重大挑战。本文旨在研究RISC-V处理器核心的优化技术,改善其通用性能;并通过扩展指令集的硬件添加和编译器修改,提高其灵活性,从而更好地适应不同场景下的应用需求。本文围绕基于RISC-V处理器SoC芯片设计、仿真和综合展开研究。首先研究RISC-V CPU流水线设计和实现方法,分析了开源玄铁RISC-V处理器核流水线架构。其次,研究提升处理器通用性能的方法和途径,提出一种改进流水线架构------XQ900RV,针对分支预测和Cache模块,分别提出改善Gshare预测器分支别名问题的方案以及基于PLRU算法的Cache访问优化技术。接着,本文探讨了实现RISC-V扩展指令集的一般方法,包括扩展指令集硬件设计和编译器修改的基本方案,提供了两种修改编译器的方法和软硬件协同方案,实现了支持SHA2和SM3加解密算法的扩展指令集,从而加速处理器的加解密应用计算,提高处理器的可信计算处理性能,降低软件运行功耗。最后,基于XQ900RV处理器核心,设计总线矩阵和DMA等模块,研究了地址空间映射和SoC软件开发环境,进行仿真测试和FPGA原型验证,完成SoC整体设计。仿真实验结果显示:在芯片硬件电路实现的SHA256扩展指令集测试中,执行时间比软件计算缩短了 38\%,退休指令数目减少了 44\%,相较于同类开源处理器能有效加速算法执行;在FPGA原型验证中,通过将原有的程序文件分解为4个bank并用BRAM存储,相较于初始设计的综合结果,降低了 21\%的BRAM资源占用;用Coremark程序对CPU性能进行测试,以采用静态分支预测器的IPC测试结果为基准,Gshare分支预测器提升性能6.6\%,而本文设计的分支预测器提升性能9.4\%。这表明,本文研究对于提升RISC-V处理器的通用处理性能以及在可信计算场景下加速处理的灵活性有显著效果。最后,本文对整个SoC设计进行逻辑综合、功耗分析、时序分析以及形式验证。在UMC 55nm工艺下,达到125MHz工作频率。逻辑电路面积为572144.7{$\mu$}m2,功耗为48.1399mW。},
  langid = {chinese},
  school = {山东大学},
  keywords = {,FPGA,RISC-V,SoC},
  file = {/home/xin/Zotero/storage/X8E2E9RD/贾 - 2023 - RISC-V处理器核设计优化与扩展指令集实现研究.pdf}
}

@article{leeAgileApproachBuilding2016,
  title = {An {{Agile Approach}} to {{Building RISC-V Microprocessors}}},
  author = {Lee, Yunsup and Waterman, Andrew and Cook, Henry and Zimmer, Brian and Keller, Ben and Puggelli, Alberto and Kwak, Jaehwa and Jevtic, Ruzica and Bailey, Stevo and Blagojevic, Milovan and Chiu, Pi-Feng and Avizienis, Rimas and Richards, Brian and Bachrach, Jonathan and Patterson, David and Alon, Elad and Nikolic, Bora and Asanovic, Krste},
  year = {2016},
  month = mar,
  journal = {IEEE Micro},
  volume = {36},
  number = {2},
  pages = {8--20},
  issn = {1937-4143},
  doi = {10.1109/MM.2016.11},
  urldate = {2023-12-26},
  abstract = {The final phase of CMOS technology scaling provides continued increases in already vast transistor counts, but only minimal improvements in energy efficiency, thus requiring innovation in circuits and architectures. However, even huge teams are struggling to complete large, complex designs on schedule using traditional rigid development flows. This article presents an agile hardware development methodology, which the authors adopted for 11 RISC-V microprocessor tape-outs on modern 28-nm and 45-nm CMOS processes in the past five years. The authors discuss how this approach enabled small teams to build energy-efficient, cost-effective, and industry-competitive high-performance microprocessors in a matter of months. Their agile methodology relies on rapid iterative improvement of fabricatable prototypes using hardware generators written in Chisel, a new hardware description language embedded in a modern programming language. The parameterized generators construct highly customized systems based on the free, open, and extensible RISC-V platform. The authors present a case study of one such prototype featuring a RISC-V vector microprocessor integrated with a switched-capacitor DC-DC converter alongside an adaptive clock generator in a 28-nm, fully depleted silicon-on-insulator process.},
  file = {/home/xin/Zotero/storage/KYVQFDHJ/Lee et al. - 2016 - An Agile Approach to Building RISC-V Microprocesso.pdf;/home/xin/Zotero/storage/36UPCSRT/7436635.html}
}

@misc{lowe-powerGem5SimulatorVersion2020,
  title = {The Gem5 {{Simulator}}: {{Version}} 20.0+},
  shorttitle = {The Gem5 {{Simulator}}},
  author = {{Lowe-Power}, Jason and Ahmad, Abdul Mutaal and Akram, Ayaz and Alian, Mohammad and Amslinger, Rico and Andreozzi, Matteo and Armejach, Adri{\`a} and Asmussen, Nils and Beckmann, Brad and Bharadwaj, Srikant and Black, Gabe and Bloom, Gedare and Bruce, Bobby R. and Carvalho, Daniel Rodrigues and Castrillon, Jeronimo and Chen, Lizhong and Derumigny, Nicolas and Diestelhorst, Stephan and Elsasser, Wendy and Escuin, Carlos and Fariborz, Marjan and {Farmahini-Farahani}, Amin and Fotouhi, Pouya and Gambord, Ryan and Gandhi, Jayneel and Gope, Dibakar and Grass, Thomas and Gutierrez, Anthony and Hanindhito, Bagus and Hansson, Andreas and Haria, Swapnil and Harris, Austin and Hayes, Timothy and Herrera, Adrian and Horsnell, Matthew and Jafri, Syed Ali Raza and Jagtap, Radhika and Jang, Hanhwi and Jeyapaul, Reiley and Jones, Timothy M. and Jung, Matthias and Kannoth, Subash and Khaleghzadeh, Hamidreza and Kodama, Yuetsu and Krishna, Tushar and Marinelli, Tommaso and Menard, Christian and Mondelli, Andrea and Moreto, Miquel and M{\"u}ck, Tiago and Naji, Omar and Nathella, Krishnendra and Nguyen, Hoa and Nikoleris, Nikos and Olson, Lena E. and Orr, Marc and Pham, Binh and Prieto, Pablo and Reddy, Trivikram and Roelke, Alec and Samani, Mahyar and Sandberg, Andreas and Setoain, Javier and Shingarov, Boris and Sinclair, Matthew D. and Ta, Tuan and Thakur, Rahul and Travaglini, Giacomo and Upton, Michael and Vaish, Nilay and Vougioukas, Ilias and Wang, William and Wang, Zhengrong and Wehn, Norbert and Weis, Christian and Wood, David A. and Yoon, Hongil and Zulian, {\'E}der F.},
  year = {2020},
  month = sep,
  number = {arXiv:2007.03152},
  eprint = {2007.03152},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2007.03152},
  urldate = {2023-12-31},
  abstract = {The open-source and community-supported gem5 simulator is one of the most popular tools for computer architecture research. This simulation infrastructure allows researchers to model modern computer hardware at the cycle level, and it has enough fidelity to boot unmodified Linux-based operating systems and run full applications for multiple architectures including x86, Arm, and RISC-V. The gem5 simulator has been under active development over the last nine years since the original gem5 release. In this time, there have been over 7500 commits to the codebase from over 250 unique contributors which have improved the simulator by adding new features, fixing bugs, and increasing the code quality. In this paper, we give and overview of gem5's usage and features, describe the current state of the gem5 simulator, and enumerate the major changes since the initial release of gem5. We also discuss how the gem5 simulator has transitioned to a formal governance model to enable continued improvement and community support for the next 20 years of computer architecture research.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Hardware Architecture},
  file = {/home/xin/Zotero/storage/5AXG7DH7/Lowe-Power et al. - 2020 - The gem5 Simulator Version 20.0+.pdf;/home/xin/Zotero/storage/TVR7626N/2007.html}
}

@inproceedings{luporiHighPerformanceRISCVEmulator2018,
  title = {Towards a {{High-Performance RISC-V Emulator}}},
  author = {Lupori, Leandro and Rosario, Vanderson and Borin, Edson},
  year = {2018},
  month = sep,
  doi = {10.1109/WSCAD.2018.00041},
  abstract = {RISC-V is an open ISA which has been calling the attention worldwide by its fast growth and adoption, it is already supported by GCC, Clang and the Linux Kernel. Moreover, several emulators and simulators for RISC-V have arisen recently. However, none of them with good performance. In this paper, we investigate if faster emulators for RISC-V could be created. As the most common and also the fastest technique to implement an emulator, Dynamic Binary Translation (DBT), depends directly on good translation quality to achieve good performance, we investigate if a high-quality translation of RISC-V binaries is feasible. To this, we used Static Binary Translation (SBT) to test the quality that can be achieved by translating RISC-V to x86 and ARM. Our experimental results indicate that our SBT is able to produce high-quality code when translating RISC-V binaries to x86 and ARM, achieving only 12\%/35\% of overhead when compared to native x86/ARM code. A better result than well-known RISC-V DBT engines such as RV8 or QEMU. Since DBTs have its performance strongly related to translation quality, our SBT engine evidence the opportunity towards the creation of RISC-V DBT emulators with higher performance than the current ones.},
  file = {/home/xin/Zotero/storage/L5BXJ5JY/Lupori et al. - 2018 - Towards a High-Performance RISC-V Emulator.pdf}
}

@misc{NetflixSubscriptionGoogle,
  title = {Netflix Subscription - {{Google Search}}},
  urldate = {2024-04-22},
  howpublished = {https://www.google.com/search?q=netflix+subscription\&oq=netflix+subscription\&gs\_lcrp=EgZjaHJvbWUyBggAEEUYOTIGCAEQLhhA0gEIODA3NGowajGoAgCwAgA\&sourceid=chrome\&ie=UTF-8},
  file = {/home/xin/Zotero/storage/M3ZQV3Z7/search.html}
}

@misc{newsRISCVFutureMachine,
  title = {{{RISC-V}} and the {{Future}} of {{Machine Learning Computing}} -- {{RISC-V International}}},
  author = {News, RISC-V. Community},
  urldate = {2024-05-13},
  langid = {american},
  file = {/home/xin/Zotero/storage/U5NWCYBK/risc-v-and-the-future-of-machine-learning-computing.html}
}

@misc{NJUProjectNNemu2023,
  title = {{{NJU-ProjectN}}/Nemu},
  year = {2023},
  month = dec,
  urldate = {2023-12-31},
  abstract = {NJU EMUlator, a full system x86/mips32/riscv32/riscv64 emulator for teaching},
  howpublished = {NJU-ProjectN}
}

@book{pattersonComputerOrganizationDesign2017,
  title = {Computer {{Organization}} and {{Design RISC-V Edition}}: {{The Hardware Software Interface}}},
  shorttitle = {Computer {{Organization}} and {{Design RISC-V Edition}}},
  author = {Patterson, David A. and Hennessy, John L.},
  year = {2017},
  month = may,
  publisher = {Morgan Kaufmann},
  abstract = {The new RISC-V Edition of Computer Organization and Design features the RISC-V open source instruction set architecture, the first open source architecture designed to be used in modern computing environments such as cloud computing, mobile devices, and other embedded systems.  With the post-PC era now upon us, Computer Organization and Design moves forward to explore this generational change with examples, exercises, and material highlighting the emergence of mobile computing and the Cloud. Updated content featuring tablet computers, Cloud infrastructure, and the x86 (cloud computing) and ARM (mobile computing devices) architectures is included. An online companion Web site provides advanced content for further study, appendices, glossary, references, and recommended reading. Features RISC-V, the first such architecture designed to be used in modern computing environments, such as cloud computing, mobile devices, and other embedded systems Includes relevant examples, exercises, and material highlighting the emergence of mobile computing and the cloud},
  googlebooks = {H7wxDQAAQBAJ},
  isbn = {978-0-12-812276-1},
  langid = {english},
  keywords = {Computers / Computer Architecture,Computers / Computer Engineering,Computers / Hardware / Chips & Processors,Technology & Engineering / Electrical,Technology & Engineering / Engineering (General)}
}

@phdthesis{PengJiYuRISCVZhiLingJiDeChuLiQiHeSheJiJiSoCShiXian2023,
  type = {{硕士}},
  title = {{基于RISC-V指令集的处理器核设计及SoC实现}},
  author = {彭, 孝德},
  year = {2023},
  doi = {10.27135/d.cnki.ghudu.2022.002359},
  urldate = {2024-05-07},
  abstract = {小到智能手表,大到超级计算机,都可以看到处理器的存在,处理器是芯片中的一个典型代表,其重要性不言而喻,当前市面上的处理器主要以X86和ARM架构为主,这两种架构都不是开源的且具有很高的专利授权壁垒,RISC-V是近些年诞生的完全开源且允许任何人使用的指令集架构,在关键芯片自主可控这样的战略指引下,研究RISC-V指令集并使用其设计处理器具有重要的意义。首先,本文对RISC-V指令集架构进行了研究,分析了它相比其他指令集架构所具备的优势特点,比如完全免费开源、指令集按功能进行模块划分、指令编码工整高效、没有分支延迟槽等,并对基本整数指令集RV32I的R型、I型、S型、SB型、U型、UJ型这6类指令格式进行了分析。其次,在分析了RV32I后,本文基于它一步步设计了一个五级流水线的处理器核,针对各类指令的功能特点设计具体的数据通路,插入了五级流水线的设计并分析了这样做的优势。对于流水线中的冲突问题也进行了分析并针对性的给出解决措施,采用将执行和访存阶段的数据旁路到译码阶段的技术来解决数据冲突问题,不使用分支延迟槽而是采用静态分支预测技术解决控制冲突问题,对处理器核模块进行了划分并对各个模块进行具体设计。通过编写测试程序使用modelsim仿真来对设计的处理器核进行验证,验证了其五级流水线的执行和冲突问题的解决,并对整数运算、存储器访问和分支跳转这几类功能指令进行了验证。最后,在设计好RISC-V处理器核的基础上,使用AHB总线和APB总线作为系统总线,对外设UART、I2C和GPIO等的设计则修改利用了开源IP,由此搭建了一个片上系统(System on Chip,SoC),再使用Intel的Cyclone IV E系列FPGA对本SoC进行了实现并做了板级验证,结果表明处理器核及SoC都能正常运转。},
  langid = {chinese},
  school = {湖南大学},
  keywords = {,AMBA,FPGA,RISC-V,SoC},
  file = {/home/xin/Zotero/storage/KTARTHU6/彭 - 2023 - 基于RISC-V指令集的处理器核设计及SoC实现.pdf}
}

@inproceedings{pillmeierDesignAlternativesBarrel2002,
  title = {Design Alternatives for Barrel Shifters},
  booktitle = {International {{Symposium}} on {{Optical Science}} and {{Technology}}},
  author = {Pillmeier, Matthew R. and Schulte, Michael J. and Walters Iii, Eugene G.},
  editor = {Luk, Franklin T.},
  year = {2002},
  month = dec,
  pages = {436},
  address = {Seattle, WA},
  doi = {10.1117/12.452034},
  urldate = {2024-01-06},
  file = {/home/xin/Zotero/storage/3YMF2DNF/Pillmeier et al. - 2002 - Design alternatives for barrel shifters.pdf}
}

@misc{RISCVDebianWiki,
  title = {{{RISC-V}} - {{Debian Wiki}}},
  urldate = {2024-04-26},
  howpublished = {https://wiki.debian.org/RISC-V\#FPGA\_implementations},
  file = {/home/xin/Zotero/storage/VH2C9PN9/RISC-V.html}
}

@software{RiscvsoftwaresrcRiscvisasim2023,
  title = {Riscv-Software-Src/Riscv-Isa-Sim},
  year = {2023},
  month = dec,
  urldate = {2023-12-31},
  abstract = {Spike, a RISC-V ISA Simulator},
  howpublished = {RISC-V Software}
}

@article{roelkeRISC5ImplementingRISCV2017,
  title = {{{RISC5}}: {{Implementing}} the {{RISC-V ISA}} in Gem5},
  author = {Roelke, Alec and Stan, Mircea R},
  year = {2017},
  abstract = {We present an RISC5, an implementation of the RISC-V ISA in the gem5 simulator. Gem5 is a modular, open-source simulation platform that supports several ISAs such as x86 and ARM and includes system-level architecture and processor microarchitecture models. It also has advanced simulation features such as system call emulation and checkpointing that the Chisel C++ simulator lacks, increasing its usefulness for simulating entire RISC-V applications or using phase analysis to estimate system behavior. Gem5 also provides detailed performance data that can be used in power estimation tools such as McPAT, which require fine granularity to provide accurate output. RISC5 is validated against performance data from the Chisel C++ emulator and FPGA soft core and is shown to have less than 10\% error on several performance statistics.},
  langid = {english},
  file = {/home/xin/Zotero/storage/C76TLQJ4/Roelke and Stan - 2017 - RISC5 Implementing the RISC-V ISA in gem5.pdf}
}

@article{shachamRethinkingDigitalDesign2010,
  title = {Rethinking {{Digital Design}}: {{Why Design Must Change}}},
  shorttitle = {Rethinking {{Digital Design}}},
  author = {Shacham, O and Azizi, O and Wachs, M and Qadeer, Wajahat and Asgar, Zain and Kelley, Kyle and Stevenson, John P and Richardson, Stephen and Horowitz, Mark and Lee, Benjamin and Solomatnikov, Alex and Firoozshahian, Amin},
  year = {2010},
  month = nov,
  journal = {IEEE Micro},
  volume = {30},
  number = {6},
  pages = {9--24},
  issn = {1937-4143},
  doi = {10.1109/MM.2010.81},
  urldate = {2023-12-29},
  abstract = {Because of technology scaling, power dissipation is today's major performance limiter. Moreover, the traditional way to achieve power efficiency, application-specific designs, is prohibitively expensive. These power and cost issues necessitate rethinking digital design. To reduce design costs, we need to stop building chip instances, and start making chip generators instead. Domain-specific chip generators are templates that codify designer knowledge and design trade-offs to create different application-optimized chips.},
  file = {/home/xin/Zotero/storage/YX6PACZA/Shacham et al. - 2010 - Rethinking Digital Design Why Design Must Change.pdf;/home/xin/Zotero/storage/5BD7BVSI/5567087.html}
}

@misc{SpinalHDLSpinalHDL2023,
  title = {{{SpinalHDL}}/{{SpinalHDL}}},
  year = {2023},
  month = dec,
  urldate = {2023-12-26},
  abstract = {Scala based HDL},
  howpublished = {SpinalHDL},
  keywords = {fpga,rtl,scala,verilog,vhdl}
}

@inproceedings{thorntonParallelOperationControl1964,
  title = {Parallel Operation in the Control Data 6600},
  booktitle = {Proceedings of the {{October}} 27-29, 1964, Fall Joint Computer Conference, Part {{II}}: Very High Speed Computer Systems},
  author = {Thornton, James E.},
  year = {1964},
  month = oct,
  series = {{{AFIPS}} '64 ({{Fall}}, Part {{II}})},
  pages = {33--40},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1464039.1464045},
  urldate = {2024-05-11},
  abstract = {About four years ago, in the summer of 1960, Control Data began a project which culminated last month in the delivery of the first 6600 Computer. In 1960 it was apparent that brute force circuit performance and parallel operation were the two main approaches to any advanced computer.},
  isbn = {978-1-4503-7888-8},
  file = {/home/xin/Zotero/storage/RPFZRJTZ/Thornton - 1964 - Parallel operation in the control data 6600.pdf}
}

@article{wangLiveHDProductiveLive2020a,
  title = {{{LiveHD}}: {{A Productive Live Hardware Development Flow}}},
  shorttitle = {{{LiveHD}}},
  author = {Wang, Sheng-Hong and Possignolo, Rafael Trapani and Skinner, Haven Blake and Renau, Jose},
  year = {2020},
  month = jul,
  journal = {IEEE Micro},
  volume = {40},
  number = {4},
  pages = {67--75},
  issn = {1937-4143},
  doi = {10.1109/MM.2020.2996508},
  urldate = {2023-12-30},
  abstract = {Synthesis and simulation of hardware design can take hours before results are available even for small changes. In contrast, software development embraced live programming to boost productivity. This article proposes LiveHD, an open-source incremental framework for hardware synthesis and simulation that provides feedback within seconds. Three principles for incremental design automation are presented. LiveHD uses an unified VLSI data model, LGraph, to support the implementation of incremental principles for synthesis and simulation. LiveHD also employs a tree-like high-level intermediate representation to interface modern hardware description languages. We present early results comparing with commercial and open source tools. LiveHD can provides feedback for the synthesis, placement, and routing in {$<$} 30 s for most changes tested with negligible QoR impact. For the incremental simulation, LiveHD is capable of getting any simulation cycle in under 2 s for a 256 RISC-V core design.},
  file = {/home/xin/Zotero/storage/YPGR234G/Wang et al. - 2020 - LiveHD A Productive Live Hardware Development Flo.pdf;/home/xin/Zotero/storage/NGLRMZPM/9099056.html}
}

@inproceedings{wangNutshellLinuxCompatibleRISCV2020,
  title = {Nutshell: {{A Linux-Compatible RISC-V Processor Designed}} by {{Undergraduates}}},
  booktitle = {{{RISC-V Global Forum}} 2020. {{RISC-V International}}},
  author = {Wang, Huaqiang and Zhang, Z and Jin, Y and Zhang, L and Wang, K},
  year = {2020}
}

@misc{watermanRISCVInstructionSet2011,
  title = {Volume {{I}}: {{Unprivileged ISA}}},
  author = {Waterman, Andrew and Asanovic, Krste},
  langid = {english},
  file = {/home/xin/Zotero/storage/6H4ZPX4Z/Waterman et al. - Volume I Unprivileged ISA.pdf}
}

@article{whatmoughCHIPKITAgileReusable2020,
  title = {{{CHIPKIT}}: {{An Agile}}, {{Reusable Open-Source Framework}} for {{Rapid Test Chip Development}}},
  shorttitle = {{{CHIPKIT}}},
  author = {Whatmough, Paul N. and Donato, Marco and Ko, Glenn G. and Lee, Sae Kyu and Brooks, David and Wei, Gu-Yeon},
  year = {2020},
  month = jul,
  journal = {IEEE Micro},
  volume = {40},
  number = {4},
  pages = {32--40},
  issn = {1937-4143},
  doi = {10.1109/MM.2020.2995809},
  urldate = {2023-12-30},
  abstract = {The current trend for domain-specific architectures has led to renewed interest in research test chips to demonstrate new specialized hardware. Tapeouts also offer huge pedagogical value garnered from real hands-on exposure to the whole system stack. However, success with tapeouts requires hard-earned experience, and the design process is time consuming and fraught with challenges. Therefore, custom chips have remained the preserve of a small number of research groups, typically focused on circuit design research. This article describes the CHIPKIT framework: a reusable SoC subsystem which provides basic IO, an on-chip programmable host, off-chip hosting, memory, and peripherals. This subsystem can be readily extended with new IP blocks to generate custom test chips. Central to CHIPKIT is an agile RTL development flow, including a code generation tool called VGEN. Finally, we discuss best practices for full-chip validation across the entire design cycle.},
  file = {/home/xin/Zotero/storage/CE79G2IP/Whatmough et al. - 2020 - CHIPKIT An Agile, Reusable Open-Source Framework .pdf;/home/xin/Zotero/storage/4Z7557BJ/9096507.html}
}

@article{wolfYosysFreeVeriloga,
  title = {Yosys - {{A Free Verilog Synthesis Suite}}},
  author = {Wolf, Clifford and Glaser, Johann},
  abstract = {Most of todays digital design work is done using hardware description languages such as Verilog HDL or VHDL. HDL synthesis is used to translate that HDL code to digital circuits. Yosys is the first free and open source software for Verilog HDL synthesis which supports the vast majority of synthesizable Verilog features. Yosys is built as an extensible framework so it can be used easily as basis for custom synthesis flows and as environment for the implementation and research on new synthesis algorithms. Yosys has special emphasis on support for coarsegrain logic, making it ideal for algorithms such as logic mapping to DSP cells in FPGAs or synthesis for custom coarse-grain reconfigurable hardware.},
  langid = {english},
  file = {/home/xin/Zotero/storage/SQYIU2BA/Wolf and Glaser - Yosys - A Free Verilog Synthesis Suite.pdf}
}

@phdthesis{XieJiYuRISCDeSiFaSheChaoBiaoLiangChuLiQiGuanJianJiaGouSheJi2024,
  type = {{硕士}},
  title = {{基于RISC-V的四发射超标量处理器关键架构设计}},
  author = {薛, 立晓},
  year = {2024},
  doi = {10.27272/d.cnki.gshdu.2023.004430},
  urldate = {2024-04-24},
  abstract = {现代高性能计算CPU是社会进步和AI大规模数据处理必不可少的数字基建底座。超标量架构是提高CPU处理器性能的主流方法,不仅大幅度提高单核性能,更可以组成集群计算方式进行大规模数据处理,如机器学习,自然语言处理,虚拟现实等。然而,欧美的x86和ARM指令集架构经过数十年的发展,已经构成超标量处理器领域的``卡脖子''垄断地位。为打破发达国家垄断,RISC-V指令集的开源、开放特点为高性能处理器设计提供了全新的机遇。本文首先概述了国内外高性能处理器的研究现状,着重分析了 RISC-V指令集在高性能处理器领域的应用,并提出支持四发射的超标量架构,具体研究内容包括以下三个部分:(1)分析RISC-V指令结构特点以及对应的译码器设计方法,并对RISC-V指令集中需要特殊译码的压缩指令以及内存屏障指令进行了分析。为了支持同周期四条指令译码,本文提出了一种译码器组合设计架构,并引入了 x86架构中的微操作理念。同时,本文将四条RISC-V指令转换为五条微操作,并对微操作的控制、传递逻辑和指令回填逻辑进行了详细的设计。(2)基于单周期五条微操作的数据通路设计思路,本文提出了实现五条微操作寄存器重命名的方法,并设计了重排序缓存实现指令乱序执行。对影响物理寄存器分配和释放的立即跳转指令单独设计处理逻辑电路,引入合并方法减少ROB表项占用,并设计了 ROB的端口使能和选择控制电路。四发射的架构使ROB的占用数在0～16范围内的比例下降4.9\%,而在17～32范围内比例上升5.2\%,提高了 ROB的利用率和处理器的乱序执行效率。(3)本文提出了支持四发射超标量架构的非对称分布式指令队列设计和双队列四端口的控制方法。并针对指令队列写入端口不足引起的端口冲突设计了反馈逻辑,从而有效减少了流水线阻塞次数。上述设计可以有效的提高处理器的指令流宽度,大规模计算程序下指令队列1～3个表项占用时钟比例提升5\%～8\%,提高了执行单元的利用率,为RISC-V架构的超标量处理器设计提供了可行方法。最后,本文讲述了上述超标量处理器架构验证平台的搭建、代码规范性检查以及单元仿真测试等具体实现过程。},
  langid = {chinese},
  school = {山东大学},
  keywords = {,RISC-},
  file = {/home/xin/Zotero/storage/5HI42XSJ/薛 - 2024 - 基于RISC-Ⅴ的四发射超标量处理器关键架构设计.pdf}
}

@inproceedings{xuDevelopingHighPerformance2022,
  title = {Towards {{Developing High Performance RISC-V Processors Using Agile Methodology}}},
  booktitle = {2022 55th {{IEEE}}/{{ACM International Symposium}} on {{Microarchitecture}} ({{MICRO}})},
  author = {Xu, Yinan and Yu, Zihao and Tang, Dan and Chen, Guokai and Chen, Lu and Gou, Lingrui and Jin, Yue and Li, Qianruo and Li, Xin and Li, Zuojun and Lin, Jiawei and Liu, Tong and Liu, Zhigang and Tan, Jiazhan and Wang, Huaqiang and Wang, Huizhe and Wang, Kaifan and Zhang, Chuanqi and Zhang, Fawang and Zhang, Linjuan and Zhang, Zifei and Zhao, Yangyang and Zhou, Yaoyang and Zhou, Yike and Zou, Jiangrui and Cai, Ye and Huan, Dandan and Li, Zusong and Zhao, Jiye and Chen, Zihao and He, Wei and Quan, Qiyuan and Liu, Xingwu and Wang, Sa and Shi, Kan and Sun, Ninghui and Bao, Yungang},
  year = {2022},
  month = oct,
  pages = {1178--1199},
  doi = {10.1109/MICRO56248.2022.00080},
  urldate = {2023-12-25},
  abstract = {While research has shown that the agile chip design methodology is promising to sustain the scaling of computing performance in a more efficient way, it is still of limited usage in actual applications due to two major obstacles: 1) Lack of tool-chain and developing framework supporting agile chip design, especially for large-scale modern processors. 2) The conventional verification methods are less agile and become a major bottleneck of the entire process. To tackle both issues, we propose MINJIE, an open-source platform supporting agile processor development flow. MINJIE integrates a broad set of tools for logic design, functional verification, performance modelling, pre-silicon validation and debugging for better development efficiency of state-of-the-art processor designs. We demonstrate the usage and effectiveness of MINJIE by building two generations of an open-source superscalar out-of-order RISC-V processor code-named XIANGSHAN using agile methodologies. We quantify the performance of XIANGSHAN using SPEC CPU2006 benchmarks and demonstrate that XIANGSHAN achieves industry-competitive performance.},
  file = {/home/xin/Zotero/storage/PS5X5N55/Xu et al. - 2022 - Towards Developing High Performance RISC-V Process.pdf;/home/xin/Zotero/storage/6ETELENZ/9923860.html}
}

@article{XuJiSuanJiZuChengYuanLiKeChengZhengJiShiXiJiaoXueGaiGeYuShiJian2014,
  title = {{计算机组成原理课程整机实习教学改革与实践}},
  author = {徐, 爱萍 and 张, 玉萍 and 涂, 国庆},
  year = {2014},
  journal = {计算机教育},
  number = {10},
  pages = {101--104},
  issn = {1672-5913},
  doi = {10.16512/j.cnki.jsjjy.2014.10.027},
  urldate = {2023-12-28},
  abstract = {针对开发式CPU设计中存在的若干问题,研究如何充分发挥学生的主观能动性并激发学生的实践积极性的教学方法,分析案例教学与自主设计相结合、时序仿真与硬件调试相结合、实验设计与实习报告相结合、集中指导与自主实验相结合、多种考核手段相结合的教学改革实践,指出这些教学改革方法在实践中取得了较好的效果,对后续计算机组成原理整机实习的进一步完善具有很好的指导作用。},
  langid = {chinese},
  keywords = {,CPU},
  file = {/home/xin/Zotero/storage/C5MRL9B4/徐 et al. - 2014 - 计算机组成原理课程整机实习教学改革与实践.pdf}
}

@article{YuanJiSuanJiXiTongDaoLunKeChengJiaoXueSiLuJiKeChengZiYuanJianShe2023,
  title = {{计算机系统导论课程教学思路及课程资源建设}},
  author = {袁, 春风 and 余, 子濠 and 朱, 光辉 and 吴, 海军 and 陈, 璐},
  year = {2023},
  journal = {计算机教育},
  number = {11},
  pages = {12--17},
  issn = {1672-5913},
  doi = {10.16512/j.cnki.jsjjy.2023.11.023},
  urldate = {2024-05-13},
  abstract = {分析``101计划''中计算机系统导论课程内容在整个计算机系统中的位置，提出课程总体建设思路；根据对hello程序执行过程的分析，阐述该课程与前导及后续相关系统类课程之间的关联关系和内容衔接，并说明相关系统类课程教学总体安排；最后介绍计算机系统导论课程主教材及其实践教学案例与教辅教材的基本内容和教学实施方案。},
  langid = {chinese},
  keywords = {,101},
  file = {/home/xin/Zotero/storage/ANB52W9W/袁 et al. - 2023 - 计算机系统导论课程教学思路及课程资源建设.pdf}
}

@article{YuanJiSuanJiZuChengYuanLiKeChengShiJianJiaoXueTanSuo2011,
  title = {{计算机组成原理课程实践教学探索}},
  author = {袁, 春风 and 张, 泽生 and 蔡, 晓燕 and 杨, 若瑜 and 王, 帅},
  year = {2011},
  journal = {计算机教育},
  number = {17},
  pages = {110--114},
  issn = {1672-5913},
  doi = {10.16512/j.cnki.jsjjy.2011.17.030},
  urldate = {2023-12-31},
  abstract = {文章首先介绍国外相关课程的实践教学情况;在分析对比国内计算机组成原理课程实践教学情况的基础上,提出相应的实践教学改革思路,规划出一整套实践教学方案。南京大学在相关课程的实践教学方面对这些改革方案进行了探索,实践结果表明,这种改革方案是有效的。},
  langid = {chinese},
  file = {/home/xin/Zotero/storage/VWVC29JF/袁 et al. - 2011 - 计算机组成原理课程实践教学探索.pdf}
}

@inproceedings{zhangTeachingComputerSystem2021,
  title = {Teaching {{Computer System Courses}} with an {{Online Large-Scale Method}}},
  booktitle = {2021 {{IEEE International Conference}} on {{Engineering}}, {{Technology}} \& {{Education}} ({{TALE}})},
  author = {Zhang, Ke and Zhang, Congwu and Chang, Yisong and Bao, Yungang and Chen, Mingyu and Zhang, Longbing and Xu, Zhiwei and Gratch, Jonathan and Zhang, Jian and Sun, Ninghui},
  year = {2021},
  month = dec,
  pages = {01--06},
  issn = {2470-6698},
  doi = {10.1109/TALE52509.2021.9678730},
  urldate = {2023-12-25},
  abstract = {Domain-Specific Architectures (DSAs) and hardware-software co-design are greatly emphasized in the CS community, which demands a significant number of participants with Computer System (CSys) capabilities and skills. Conventional CSys courses in a lecture-lab format are limited in physical resources and inherently difficult to cultivate talents at a large scale. Online teaching is a potential alternative to instantly enlarge the face-to-face class size. Unfortunately, simply putting the lecture contents in CSys courses online lacks 1) personal attention, 2) learner-instructor interactions, and 3) real-hardware experimental environments. To tackle the above challenges, we introduce a four phase online CSys course program and the related teaching methods for a cloud-based teaching platform. The four-phase course program included two basic/required stages and two advanced/optional stages to promote students' knowledge and skill level with appropriate personal attention. We studied if online interaction methods, such as in-class chat and one-on-one online grading interview, can strengthen the connections between teachers and students in both lectures and labs. We created a heterogeneous cloud platform to enable students nationwide to reliably conduct labs or projects on remote programmable hardware. We believe that our proposed course design methodology is beneficial to other CScourses in the post-COVID-19-era.},
  file = {/home/xin/Zotero/storage/EMML33IG/Zhang et al. - 2021 - Teaching Computer System Courses with an Online La.pdf;/home/xin/Zotero/storage/5G752MDT/9678730.html}
}

@phdthesis{ZhaoJiYuRISCVZhiLingJiDeChuLiQiHeYuSoCSheJi2023,
  type = {{硕士}},
  title = {{基于RISC-V指令集的处理器核与SoC设计}},
  author = {赵, 博涵},
  year = {2023},
  doi = {10.27075/d.cnki.ghzdc.2023.001435},
  urldate = {2024-05-07},
  abstract = {随着物联网的发展,处理器作为物联网的重要核心,对其性能、面积、功耗的要求也在不断提高。指令集架构作为处理器的基本,对处理器的性能与微架构都有巨大的影响。目前绝大多数嵌入式处理器均基于ARM指令集,但ARM指令集授权昂贵且指令复杂。RISC-V指令集因具有开源、指令格式简单且支持自定义扩展指令等优点逐渐被嵌入式行业关注。因此设计一款面向嵌入式应用且便于扩展的RISC-V指令集微处理器具有重要的意义。本文基于RISC-V指令集架构,设计了一款支持RV64IM指令子集的处理器核。处理器核使用五级流水线技术,并在经典五级流水线的基础上做出改进:1)处理器核使用了基于局部历史的分支预测技术以提高分支预测正确率,减少因分支指令引起的流水线冲刷。2)使用两级流水线,四路组相联的指令缓存(Instruction Cache,I-Cache)模块对取指功能进行优化,同时搭配指令预取,提高取指效率。3)使用两级流水线,四路组相联的非阻塞式数据缓存(Data Cache,D-Cache)提升访存指令的处理效率,并通过缓冲队列提升D-Cache的替换速度。基于该处理器内核,设计了一款片上系统(System On Chip,SoC),集成处理器核与内存、外设、中断控制器等模块。同时基于SoC地址空间分配,开发了各外设的库函数,编写Bootloader程序使SoC更便捷的进行程序下载同时保证程序不会在SoC掉电后丢失。本文通过动态仿真与可编程逻辑阵列(Field Programmable Gate Array,FPGA)验证分别对设计的处理器核以及SoC平台的功能进行了测试,并对分支预测、Cache等性能优化模块进行了单独的测试。经测试,处理器核与SoC平台功能设计正确,分支预测正确率可达91\%以上。在50Mhz时钟频率下,本文设计的处理器Core Mark跑分为2.89,优于ARM Cotex-M0等低端嵌入式处理器的性能。},
  langid = {chinese},
  school = {杭州电子科技大学},
  keywords = {,Cache,RISC-V,SoC},
  file = {/home/xin/Zotero/storage/DVZJ4I2K/赵 - 2023 - 基于RISC-V指令集的处理器核与SoC设计.pdf}
}

@article{zhaoSonicBOOM3rdGeneration,
  title = {{{SonicBOOM}}: {{The}} 3rd {{Generation Berkeley Out-of-Order Machine}}},
  author = {Zhao, Jerry and Korpan, Ben and Gonzalez, Abraham and Asanovic, Krste},
  langid = {english},
  file = {/home/xin/Zotero/storage/QQGRHNJT/Zhao et al. - SonicBOOM The 3rd Generation Berkeley Out-of-Orde.pdf}
}

@misc{ZipCPUZipcpuSmalla,
  title = {{{ZipCPU}}/Zipcpu: {{A}} Small, Light Weight, {{RISC CPU}} Soft Core},
  shorttitle = {{{ZipCPU}}/Zipcpu},
  journal = {GitHub},
  urldate = {2024-05-08},
  abstract = {A small, light weight, RISC CPU soft core. Contribute to ZipCPU/zipcpu development by creating an account on GitHub.},
  howpublished = {https://github.com/ZipCPU/zipcpu},
  langid = {english},
  file = {/home/xin/Zotero/storage/ACJMA2FM/zipcpu.html}
}
